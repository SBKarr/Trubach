/*
           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
                   Version 2, December 2004

Copyright (C) 2020 SBKarr <sbkarr@stappler.org>

Everyone is permitted to copy and distribute verbatim or modified
copies of this license document, and changing it is allowed as long
as the name is changed.

           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

 0. You just DO WHAT THE FUCK YOU WANT TO.
*/

#ifndef SRC_CONFIG_H_
#define SRC_CONFIG_H_

#include "Define.h"

NS_SA_EXT_BEGIN(trubach)

// Ключ API от YouTube Data API v3
static constexpr auto YOUTUBE_API_KEY = "000000000000000000000000000000000000000";

// Закрытый ключ, использовается для защиты авторизации
static constexpr auto PRIVATE_KEY =
R"PubKey(-----BEGIN RSA PRIVATE KEY-----
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000
-----END RSA PRIVATE KEY-----
)PubKey";

// Открытый ключ ключ, использовается для защиты авторизации
static constexpr auto PUBLIC_KEY =
R"PubKey(-----BEGIN PUBLIC KEY-----
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000
-----END PUBLIC KEY-----
)PubKey";

// Данные провайдера OpenID Connect jn Google
static constexpr auto GOOGLE_PROVIDER =
R"Json({
	"type" : "oidc",
	"id" : "<идентификатор_oauth>",
	"secret" : "<секрет>",
	"discovery" : "https://accounts.google.com/.well-known/openid-configuration",
	"external_ids" : [ ]
})Json";

// Конфигурация соединения с почтовым сервером
static constexpr auto MAIL_CONFIG =
R"Json({
	"server": "<адрес>",
	"user": "<пользователь>",
	"password": "<пароль>",
	"from": "<адрес, от имени которого отправлять сообщения>",
	"name": "<имя отправителя>"
})Json";

static constexpr auto TG_BOT = "<ид телеграм-бота>";
static constexpr auto HTTP_ADDRESS = "<публичный адрес сервера для webhook>";
static constexpr auto HUB_SECRET = "<ключ от хаба PubSubHubbub>"; // просто случайные байты в формате base64-url

static constexpr bool TG_PROXY = true; // Используется ли прокси для телеграма
static constexpr auto TG_PROXY_ADDRESS = "<адрес прокси>";
static constexpr auto TG_PROXY_AUTH = "<user>:<password>";

NS_SA_EXT_END(trubach)

#endif /* SRC_CONFIG_H_ */
